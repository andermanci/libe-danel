---
import Date from "@/components/Date.astro"
import { EVENT_TIMESTAMP } from "@/consts/event-date"
---

<div aria-label="cuenta atrÃ¡s">
	<div
		class="grid w-full grid-cols-2 flex-col items-center justify-center gap-4 uppercase text-primary md:grid-cols-4 md:gap-x-6 text-white"
		data-date={EVENT_TIMESTAMP}
		role="timer"
	>
		<Date
			wrapperClassName="my-6"
			dateType="Dias"
			attribute={{ "data-days": "" }}
			className="text-7xl text-accent"
			height={"h-[3.8rem]"}
			max={300}
		/>

		<Date
			wrapperClassName="my-6"
			dateType="Horas"
			attribute={{ "data-hours": "" }}
			className="text-7xl text-accent"
			height={"h-[3.8rem]"}
			max={23}
		/>

		<Date
			wrapperClassName="my-6"
			dateType="Minutos"
			attribute={{ "data-minutes": "" }}
			className="text-7xl text-accent"
			height={"h-[3.8rem]"}
			max={59}
		/>

		<Date
			wrapperClassName="my-6"
			dateType="Segundos"
			attribute={{ "data-seconds": "" }}
			className="text-7xl text-accent"
			height={"h-[3.8rem]"}
			max={59}
		/>
	</div>
</div>

<script>
	const SECOND = 1000
	const MINUTE = SECOND * 60
	const HOUR = MINUTE * 60
	const DAY = HOUR * 24

	function init() {
		const $countdown = document.querySelector("[data-date]")
		if (!$countdown) return

		let intervalId: number

		const $days = {
			firstDigit: $countdown.querySelector("[data-days] [data-first-group]"),
			secondDigit: $countdown.querySelector("[data-days] [data-second-group]"),
			thirdDigit: $countdown.querySelector("[data-days] [data-third-group]"),
		}

		const $hours = {
			firstDigit: $countdown.querySelector("[data-hours] [data-first-group]"),
			secondDigit: $countdown.querySelector("[data-hours] [data-second-group]"),
		}

		const $minutes = {
			firstDigit: $countdown.querySelector("[data-minutes] [data-first-group]"),
			secondDigit: $countdown.querySelector("[data-minutes] [data-second-group]"),
		}

		const $seconds = {
			firstDigit: $countdown.querySelector("[data-seconds] [data-first-group]"),
			secondDigit: $countdown.querySelector("[data-seconds] [data-second-group]"),
		}

		const timestamp = $countdown.getAttribute("data-date")
		if (!timestamp) return

		const date = new Date(+timestamp).getTime()

		const formatTime = (time: number) => {
			return Math.floor(time).toString().padStart(2, "0")
		}

		function animateDigit(group: HTMLElement, value: string) {
			const wrapper = group.querySelector("[data-wrapper]")
			const num = group.querySelector(`[data-num="${value}"]`)
			const xnum = group.querySelector("[data-num-x0]") // 0 aÃ±adido para la animaciÃ³n

			if (
				wrapper instanceof HTMLElement &&
				num instanceof HTMLElement &&
				xnum instanceof HTMLElement
			) {
				wrapper.style.transform = `translateY(-${num.offsetTop}px)`

				// Cuando cambie, volver arriba
				if (value === "0") {
					setTimeout(() => {
						wrapper.classList.toggle("duration-[800ms]", false)
						wrapper.classList.toggle("transition-transform", false)
						wrapper.style.transform = `translateY(-${xnum.offsetTop}px)`
					}, 800)
				} else {
					wrapper.classList.toggle("duration-[800ms]", true)
					wrapper.classList.toggle("transition-transform", true)
				}
			}
		}

		function updateCountdown() {
			const now = Date.now()
			const diff = date - now
			const $countdown = document.querySelector("[data-date]")
			if (!$countdown) return

			const days = formatTime(diff / DAY)
			const hours = formatTime((diff % DAY) / HOUR)
			const minutes = formatTime((diff % HOUR) / MINUTE)
			const seconds = formatTime((diff % MINUTE) / SECOND)

			if (
				$days.firstDigit instanceof HTMLElement &&
				$days.secondDigit instanceof HTMLElement &&
				$days.thirdDigit instanceof HTMLElement
			) {
				animateDigit($days.firstDigit, days[0])
				animateDigit($days.secondDigit, days[1])
				animateDigit($days.thirdDigit, days[2])
			}

			if ($hours.firstDigit instanceof HTMLElement && $hours.secondDigit instanceof HTMLElement) {
				animateDigit($hours.firstDigit, hours[0])
				animateDigit($hours.secondDigit, hours[1])
			}

			if (
				$minutes.firstDigit instanceof HTMLElement &&
				$minutes.secondDigit instanceof HTMLElement
			) {
				animateDigit($minutes.firstDigit, minutes[0])
				animateDigit($minutes.secondDigit, minutes[1])
			}

			if (
				$seconds.firstDigit instanceof HTMLElement &&
				$seconds.secondDigit instanceof HTMLElement
			) {
				animateDigit($seconds.firstDigit, seconds[0])
				animateDigit($seconds.secondDigit, seconds[1])
			}

			if (diff < 1000) {
				clearInterval(intervalId)
				document.querySelector(".countdown-text")?.remove()

				$countdown.innerHTML = "Â¡Ya nos hemos casado! ðŸŽ‰"
				$countdown.className =
					"text-primary uppercase animate-fade-in text-3xl text-center"
			}
		}

		intervalId = setInterval(updateCountdown, SECOND)
		updateCountdown()
	}

	init()
</script>